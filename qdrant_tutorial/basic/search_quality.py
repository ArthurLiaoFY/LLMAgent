# %%
import json
from time import time

from datasets import load_dataset
from qdrant_client import QdrantClient, models

# %%
with open("../secrets.json") as f:
    secrets = json.loads(f.read())
dataset = load_dataset(
    "Qdrant/arxiv-titles-instructorxl-embeddings", split="train", streaming=True
)

# %%
dataset_iterator = iter(dataset)
train_dataset = [next(dataset_iterator) for _ in range(60000)]
test_dataset = [next(dataset_iterator) for _ in range(1000)]
# %%
len(train_dataset)
# %%
len(test_dataset)
# %%

client = QdrantClient(**secrets.get("qdrant").get("local"))
collection_name = "arxiv-titles-instructorxl-embeddings"
if not client.collection_exists(collection_name=collection_name):
    client.create_collection(
        collection_name=collection_name,
        vectors_config=models.VectorParams(
            size=768,  # Size of the embeddings generated by InstructorXL model
            distance=models.Distance.COSINE,
        ),
    )
client.get_collection(collection_name=collection_name)
# %%
client.upload_points(  # upload_points is available as of qdrant-client v1.7.1
    collection_name=collection_name,
    points=[
        models.PointStruct(
            id=item["id"],
            vector=item["vector"],
            payload=item,
        )
        for item in train_dataset
    ],
)


# %%
def avg_precision_at_k(k: int):
    precisions = []
    for item in test_dataset:
        ann_result = client.query_points(
            collection_name=collection_name,
            query=item["vector"],
            limit=k,
        ).points

        knn_result = client.query_points(
            collection_name=collection_name,
            query=item["vector"],
            limit=k,
            search_params=models.SearchParams(
                exact=True,  # Turns on the exact search mode
            ),
        ).points

        # We can calculate the precision@k by comparing the ids of the search results
        ann_ids = set(item.id for item in ann_result)
        knn_ids = set(item.id for item in knn_result)
        precision = len(ann_ids.intersection(knn_ids)) / k
        precisions.append(precision)

    return sum(precisions) / len(precisions)


# %%
avg_precision_at_k(k=5)
# %%
